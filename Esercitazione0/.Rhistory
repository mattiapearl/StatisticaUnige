wd()
ps_cwd()
ps::ps_cwd()
ls()
# Assegno la working directory - Ho creato un progetto, quindi la workdir è già corretta. Aggiungo pseudocodice esplicativo sotto
setwd("C:\Files\Personali\Unige\Code\SD\Esercitazione0")
# Assegno la working directory - Ho creato un progetto, quindi la workdir è già corretta. Aggiungo pseudocodice esplicativo sotto
setwd("C:\Files\Personali\Unige\Code\SD\Esercitazione0")
# Assegno la working directory - Ho creato un progetto, quindi la workdir è già corretta. Aggiungo pseudocodice esplicativo sotto
setwd("C:/Files/Personali/Unige/Code/SD/Esercitazione0")
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
View(adult)
# Studio la dimensione del dataframe
dim = dim(adult)
#Studio la struttura del dataframe prima di convertirle in factor
str(adult)
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
y>=3
y <- [1:10]
y <- 1:10
y>=3
y[y>=3]
which(str(dfAdult)== chr)
which(str(dfAdult)== "chr")
View(dfAdult)
columns(dfAdult)
colnames(dfAdult)
dfAdult["age"]
dfAdult[["age"]]
clear()
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
class(dfAdult[i])
class(dfAdult[[i]])
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
print(class(dfAdult[i]))
print(class(dfAdult[[i]]))
}
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore  print(class(dfAdult[[i]]))
if(dfAdult[[i]] == "character"){
print(dfAdult[i])
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore  print(class(dfAdult[[i]]))
print(class(dfAdult[[i]]))
if(dfAdult[[i]] == "character"){
print(dfAdult[i])
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore  print(class(dfAdult[[i]]))
print(class(dfAdult[[i]]))
if(dfAdult[[i]] == c("character")){
print(dfAdult[i])
}
}
warnings()
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore
# print(class(dfAdult[[i]])) //DEBUG
if(class(dfAdult[[i]]) == "character"){
print(dfAdult[i])
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore
# print(class(dfAdult[[i]])) //DEBUG
if(class(dfAdult[[i]]) == "character"){
print("yeah")
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore
# print(class(dfAdult[[i]])) //DEBUG
if(class(dfAdult[[i]]) == "character"){
print("Cambio la classe di", i ,"a fattore")
dfAdult[i] <- as.factor(dfAdult[i])
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore
# print(class(dfAdult[[i]])) //DEBUG
if(class(dfAdult[[i]]) == "character"){
#Cat concatena i valori e li stampa, così posso mettere sia i che la stringa nella stessa linea e ridurre la lunghezza
cat("Cambio la classe di ", i ," a fattore")
dfAdult[i] <- as.factor(dfAdult[i])
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore
# print(class(dfAdult[[i]])) //DEBUG
if(class(dfAdult[[i]]) == "character"){
#Cat concatena i valori e li stampa, così posso mettere sia i che la stringa nella stessa linea e ridurre la lunghezza
cat("Cambio la classe di ", i ," a fattore (Chiamo la colonna come vettore)\n")
dfAdult[[i]] = as.factor(dfAdult[i])
}
}
#Itero attraverso i nomi di colonna
for (i in colnames(dfAdult)) {
# Se la classe del vettore colonna (uso [[]] per generare un vettore anzi che un dataframe da una singola colonna) è character, cambia quella colonna in fattore
# print(class(dfAdult[[i]])) //DEBUG
if(class(dfAdult[[i]]) == "character"){
#Cat concatena i valori e li stampa, così posso mettere sia i che la stringa nella stessa linea e ridurre la lunghezza
cat("Cambio la classe di ", i ," a fattore (Chiamo la colonna come vettore)\n")
dfAdult[[i]] = as.factor(dfAdult[[i]])
}
}
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
dfAdult
str(dfAdult)
dfAdult[1,;10,]
dfAdult[1,:10,]
head(dfAdult(10))
#Stampo le prime 10 righe
head(dfAdult,10)
#Visualizzo il dataframe
View(dfAdult)
str(dfAdult[[education]])
str(dfAdult$education)
View(dfAdult)
levels(dfAdult[["education"]])
#Creo un fattore ordinato per l'educazione
education_rec <- ordered(unordEduc = dfAdult$education, levels =c("Preschool","1st-4th","5th-6th","9th","10th","11th","12th","HS-grad","Prof-school","Assoc-acdm","Assoc-voc","Some-college","Bachelors","Masters","Doctorate"))
dfAdult$education
#Creo un fattore ordinato per l'educazione
education_rec <- ordered(x = dfAdult$education, levels =c("Preschool","1st-4th","5th-6th","9th","10th","11th","12th","HS-grad","Prof-school","Assoc-acdm","Assoc-voc","Some-college","Bachelors","Masters","Doctorate"))
education_rec
levels(education_rec)
#Non ho capito se serva sostituirlo ad education, ma in caso ecco quì:
dfAdult$education = education_rec
str(dfAdult)
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
str(dfAdult)
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
str(qDfAdult)
for (i in colnames(qDfAdult)) {
if(class(qDfAdult[[i]]) == "int"){
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[,-i]
}
}
str(qDfAdult)
View(qDfAdult)
print(class(qDfAdult[[i]]))
print(class(qDfAdult[[i]]))
for (i in colnames(qDfAdult)) {
print(class(qDfAdult[[i]]))
if(class(qDfAdult[[i]]) == "int"){
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[,-i]
}
}
for (i in colnames(qDfAdult)) {
print(class(qDfAdult[[i]]))
if(class(qDfAdult[[i]]) == "integer"){
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[,-i]
}
}
for (i in colnames(qDfAdult)) {
print(class(qDfAdult[[i]]))
if(class(qDfAdult[[i]]) == "integer"){
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[-i]
}
}
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[,-i]
for (i in colnames(qDfAdult)) {
if(class(qDfAdult[[i]]) == "integer"){
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[,-i]
}
}
for (i in colnames(qDfAdult)) {
if(class(qDfAdult[[i]]) == "integer"){
#Rimuovo la specifica colonna da qDfAdult
qDfAdult[,-c(i)]
}
}
cancelVect <- c()
for (i in colnames(qDfAdult)) {
if(class(qDfAdult[[i]]) == "integer"){
#Aggiungo tutte queste colonne a un vettore
cancelVect <- append(cancelVect,i)
}
}
#Ora creo un subset del dataframe qualitativo senza le colonne quantitative
qDfAdult <- subset(qDfAdult, select = -cancelVect)
class(cancelVect)
#Ora creo un subset del dataframe qualitativo senza le colonne quantitative
#Devo usare questo metodo e non subset perchè colnames mi da una stringa, quindi il vettore è composto di stringhe - mentre subset vuole il valore "non in stringa"
qDfAdult <- qDfAdult[keepVect]
keepVect <- c()
for (i in colnames(qDfAdult)) {
if(class(qDfAdult[[i]]) != "integer"){
#Aggiungo tutte queste colonne a un vettore
keepVect <- append(keepVect,i)
}
}
#Ora creo un subset del dataframe qualitativo senza le colonne quantitative
#Devo usare questo metodo e non subset perchè colnames mi da una stringa, quindi il vettore è composto di stringhe - mentre subset vuole il valore "non in stringa"
qDfAdult <- qDfAdult[keepVect]
View(qDfAdult)
str(qDfadult)
str(qDfAdult)
dfAdult
View(dfAdult)
#Osservo la variabile workclass
str(dfAdult$workclass)
#Osservo la variabile workclass
levels(dfAdult$workclass)
table(dfAdult$workclass)
length(dfAdult$workclass)
#Tabella con frequenza assoluta
table(dfAdult$workclass)
#per contare la popolazione, osservo quale sia la lunghezza del vettore
table(dfAdult$workclass/length(dfAdult$workclass))
levels(dfAdult$workclass)
#Tabella con frequenza assoluta
aWcTable <- table(dfAdult$workclass)
print(wcTable)
#per contare la popolazione, osservo quale sia la lunghezza del vettore
rWcTable <- aWcTable / length(dfAdult$workclass)
print(rWcTable)
# Per sfizio la stampo anche in percentuale
print(rWcTable*100)
2.9 + 6.4 + 0.01 + 68.85 + 3.55 + 8.11 + 4.195 + 0.04
levels(qDfAdult$workclass)
#Tabella con frequenza assoluta
aWcTable <- table(qDfAdult$workclass)
print(AwcTable)
#per contare la popolazione, osservo quale sia la lunghezza del vettore (freq rel = freq ass / popolazione)
rWcTable <- aWcTable / length(qDfAdult$workclass)
print(rWcTable)
# Per sfizio la stampo anche in percentuale
print(rWcTable*100)
qDfAdult$workclass
qDfAdult$workclass[qDfAdult$workclass = "Never-workded"]
qDfAdult$workclass[qDfAdult$workclass == "Never-workded"]
dfAdult$workclass[qDfAdult$workclass == "Never-workded"]
qDfAdult$workclass[qDfAdult$workclass == "Never-worked"]
dfAdult$workclass[qDfAdult$workclass == "Never-worked"]
dfAdult$workclass[dfAdult$workclass == "Never-worked"]
#Tabella con frequenza assoluta (PER OTTENERE UNA PERCENTUALE CHE ARRIVA A 100 DEVO OMETTERE I VALORI NON PRESENTI)
naOmittedWc <-  na.omit(workclass)
#Tabella con frequenza assoluta (PER OTTENERE UNA PERCENTUALE CHE ARRIVA A 100 DEVO OMETTERE I VALORI NON PRESENTI)
naOmittedWc <-  na.omit(dfAdult$workclass)
aWcTable <- table(naOmittedWc)
print(AwcTable)
#per contare la popolazione, osservo quale sia la lunghezza del vettore (freq rel = freq ass / popolazione)
rWcTable <- aWcTable / length(naOmittedWc)
print(rWcTable)
# Per sfizio la stampo anche in percentuale
print(rWcTable*100)
print(aWcTable)
##3
# Studio la dimensione del dataframe
dim = dim(dfAdult) # RxC
##3
# Studio la dimensione del dataframe
dim = dim(dfAdult) # RxC
source("C:/Files/Personali/Unige/Code/SD/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
#La stampo a schermo
cat(dim, "Formato: RxC")
#La stampo a schermo
cat(dim, "(Righe Colonne)")
aWcTable <- table(vettore)
print(vettore)
#per contare la popolazione, osservo quale sia la lunghezza del vettore (freq rel = freq ass / popolazione)
rWcTable <- aWcTable / length(vettore)
print(rWcTable)
# Per sfizio la stampo anche in percentuale
print(rWcTable*100)
#Stampo l'istogramma del dataset dato
hist(rWcTable)
#Stampo l'istogramma del dataset dato
plot(rWcTable)
#Stampo l'istogramma del dataset dato
barplot(rWcTable)
#Stampo l'istogramma del dataset dato
barplot(percWcTable)
rWcTable *100
print(percWcTable)
#Stampo l'istogramma del dataset dato
barplot(percWcTa
# Per sfizio la stampo anche in percentuale
percWcTable <-  rWcTable *100
# Per sfizio la stampo anche in percentuale
percWcTable <-  rWcTable * 100
print(percWcTable)
#Stampo l'istogramma del dataset dato
barplot(percWcTable)
#Stampo l'istogramma del dataset dato
barplot(aWcTable)
printAbsRelHist <-  function (vettore){
aWcTable <- table(vettore)
print(vettore)
#per contare la popolazione, osservo quale sia la lunghezza del vettore (freq rel = freq ass / popolazione)
rWcTable <- aWcTable / length(vettore)
print(rWcTable)
# Per sfizio la stampo anche in percentuale
percWcTable <-  rWcTable * 100
print(percWcTable)
#Stampo l'istogramma del dataset dato
barplot(aWcTable)
}
printAbsRelHist(naOmittedWc)
#Restanti casi
for(i in colnames(qDfAdult)){
#Se non è workclass, che abbiamo già plottato
if(i != "workclass"){
printAbsRelHist(qDfAdult[[i]])
}
}
#Stampo l'istogramma del dataset dato
barplot(aWcTable, xlab = "Classe lavorativa", ylab = "Numero di rilevazioni",las=2)
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
#FUNZIONE:
#ARGUMENTS: vettore - un vettore
#RETURNS: void
#UTILIZZO: Prende un vettore variabile (factor, a più livelli), se stampa una tabella di contingenza per la freq assoluta, quella relativa (e quella rel percentuale), e stampa un diagramma a barre (non cambia nulla tra i tipi di dati in quanto separati da una costante coumne)
printAbsRelHist <-  function (vettore, nomeX){
aWcTable <- table(vettore)
print(vettore)
#per contare la popolazione, osservo quale sia la lunghezza del vettore (freq rel = freq ass / popolazione)
rWcTable <- aWcTable / length(vettore)
print(rWcTable)
# Per sfizio la stampo anche in percentuale
percWcTable <-  rWcTable * 100
print(percWcTable)
#Stampo l'istogramma del dataset dato
barplot(aWcTable, xlab = nomeX, ylab = "Numero di rilevazioni",las=2)
}
#Restanti casi
for(i in colnames(qDfAdult)){
#Se non è workclass, che abbiamo già plottato
if(i != "workclass"){
printAbsRelHist(qDfAdult[[i]], i)
}
}
orderedAdult
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
orderedAdult
##12
mOrderedAdult <- orderedAdult[sex == "M"]
##12
mOrderedAdult <- orderedAdult[orderedAdult$sex == "M"]
View(mOrderedAdult)
##12
mOrderedAdult <- orderedAdult[orderedAdult$sex == "Male"]
##12
mOrderedAdult <- orderedAdult[orderedAdult$sex == "Male"]
##12
mOrderedAdult <- orderedAdult[orderedAdult$sex = "Male"]
orderedAdult$sex
orderedAdult$sex == "Male"
##12
mOrderedAdult <- orderedAdult[orderedAdult$sex == "Male"]
##12
mOrderedAdult <- orderedAdult[orderedAdult$sex == "Male",]
fOrderedAdult <- orderedAdult[orderedAdult$sex == "Female",]
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
mfOrderedAdult <- rbind(mOrderedAdult,fOrderedAdult)
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
View(mfOrderedAdult)
dim(mOrderedAdult)
print("Dimensioni del dataframe Female")
dim(fOrderedAdult)
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
print qDfAdult
print (qDfAdult)
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
#Restanti casi
for(i in colnames(qDfAdult)){
#Se non è workclass, che abbiamo già plottato
if(i != "workclass"){
printAbsRelHist(qDfAdult[[i]], i)
}
}
#Restanti casi
for(i in colnames(qDfAdult)){
#Se non è workclass, che abbiamo già plottato
if(i != "workclass"){
printAbsRelHist(qDfAdult[[i]], i)
}
}
naOmittedWc
table(naOmittedWc)
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
source("C:/Files/Personali/Unige/Code/SD/GruppoStat/Esercitazione0/script.R", encoding = 'UTF-8', echo=TRUE)
#FUNZIONE:
#ARGUMENTS: vettore - un vettore, nomeX - nome da dare alla coordinata x, il nome della colonna del dataframe va bene
#RETURNS: void
#UTILIZZO: Prende un vettore variabile (factor, a più livelli), se stampa una tabella di contingenza per la freq assoluta, quella relativa (e quella rel percentuale), e stampa un diagramma a barre (non cambia nulla tra i tipi di dati in quanto separati da una costante coumne)
printAbsRelHist <-  function (vettore, nomeX){
aWcTable <- table(vettore)
#Relativo come "proportionate to the rest of the table": prop.table
rWcTable <- prop.table(aWcTable)
#Affianco le tabelle per colonna (prendo la freq relativa e quella rel perc con il round e il *100)
totalTable <- cbind(aWcTable,round(rWcTable,4),round(rWcTable*100,2))
#Nomi colonne
colnames(totalTable) <- c("Freq Assoluta", "Relativa", "Pecentuale")
#Stampa un "divisore". Il \n appended alla fine serve a mandare il cursore a nuova linea in cat. Con writelines non ci sarebbe il problema, con print non si potrebbe stampare su più righe
cat("\n\n######## \n", nomeX,"\n########")
print(totalTable)
#Stampo l'istogramma del dataset dato
barplot(aWcTable, xlab = nomeX, ylab = "Numero di rilevazioni",las=2)
}
#Restanti casi
for(i in colnames(qDfAdult)){
#Se non è workclass, che abbiamo già plottato
if(i != "workclass"){
printAbsRelHist(qDfAdult[[i]], i)
}
}
